/*
 * Copyright (c) 2016 Samsung Electronics Co., Ltd. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "../../inc/view_defines.h"
#include "edc_defines.h"

/*
PART_DATA_PARAM_NAME
	rel1 = offset_from_boarder + name_width * num
	rel2 = offset_from_boarder + ((name_width+value_width) * num) + name_width

PART_DATA_PARAM_VALUE
	rel1 = offset_from_boarder + (value_width * num) + name_width
	rel2 = offset_from_boarder + ((name_width+value_width) * num) + (name+value)
*/

#define PART_DATA(num, r, g, b)                       \
part {                                                \
	name: PART_DATA_PARAM_NAME""num;                  \
	type: TEXTBLOCK;                                  \
	description {                                     \
		state: "default" 0.0;                         \
		rel1.relative: 0.1166+(0.2555*num) 0.2472;    \
		rel2.relative: 0.1721+(0.2555*num) 0.3194;    \
		fixed: 1 1;                                   \
		color: r g b 255;                             \
		text {                                        \
			style: STYLE_VALUES;                      \
			text: "name";                             \
		}                                             \
	}                                                 \
}                                                     \
part {                                                \
	name: PART_DATA_PARAM_VALUE""num;                 \
	type: TEXTBLOCK;                                  \
	description {                                     \
		state: "default" 0.0;                         \
		rel1.relative: 0.1722+(0.2555*num) 0.2472;    \
		rel2.relative: 0.3722+(0.2555*num)+92 0.3194; \
		fixed: 1 1;                                   \
		color: r g b 255;                             \
		text {                                        \
			style: STYLE_VALUES;                      \
			text: "val";                              \
		}                                             \
	}                                                 \
}                                                     \


#define STYLE_VALUES "style,values"

styles {
	style {
		name: STYLE_VALUES;
		base: "font=BreezeMonospace:style=Medium font_size=16 color=#fff wrap=none align=right";
		tag: "con" "+ font_size=13";
	}
}

collections {
	base_scale: 1.0;
	images {
		image: IMAGE_BG_2 COMP;
		image: IMAGE_OUTLINE_2 COMP;
	}
	group {
		name: GRP_DATA;
		parts {
			part {
				name: PART_BG;
				type: IMAGE;
				description { state: "default" 0.0;
					rel1.relative: 0.0 0.0;
					rel2.relative: 1.0 1.0;
					image {
						normal: IMAGE_BG_2;
					}
				}
			}
			part {
				name: PART_CHART;
				type: SWALLOW;
				description {
					state: "default" 0.0;
					rel1.relative: 0.0444 0.3056;
					rel2.relative: 0.9556 0.7444;
				}
			}
			part {
				name: PART_OUTLINE;
				type: IMAGE;
				description {
					state: "default" 0.0;
					rel1.relative: 0.0 0.0;
					rel2.relative: 1.0 1.0;
					image {
						normal: IMAGE_OUTLINE_2;
					}
				}
			}
			part {
				name: PART_INDICATOR;
				type: SWALLOW;
				description {
					state: "default" 0.0;
					rel1.relative: 0.0 0.0;
					rel2.relative: 1.0 1.0;
				}
			}

			PART_DATA(0, 255, 0, 0)
			PART_DATA(1, 0, 255, 0)
			PART_DATA(2, 0, 0, 255)
			PART_DATA(3, 0, 255, 255)
		}
		script {
			public _change_part_state(name[], index, rel1, rel2, visibility) {
				new part[32];
				new part_id;

				snprintf(part, 32, "%s%d", name, index);
				part_id = get_part_id(part);

				custom_state(part_id, STATE_DEFAULT, 0.0);
				set_state_val(part_id, STATE_REL1, rel1 / 360.0, 89 / 360.0);
				set_state_val(part_id, STATE_REL2, rel2 / 360.0, (89 + 26) / 360.0);
				set_state_val(part_id, STATE_VISIBLE, visibility);
				set_state(part_id, STATE_CUSTOM, 0.0);
			}

			public _change_display_state(part_index, offset, name_width, value_width, visibility) {
				new display_width = name_width + value_width;
				new rel1 = offset + (display_width * part_index);
				new rel2 = offset + (display_width * part_index) + name_width;

				_change_part_state(PART_DATA_PARAM_NAME,  part_index, rel1, rel2, visibility)
				_change_part_state(PART_DATA_PARAM_VALUE, part_index, rel2, rel2 + value_width, visibility)
			}

			public _change_displays_state(parts_to_display) {
				new visibility = 0;
				static const part_states[4][3] = {
						{ 55, 80, 80},  /* offset from boarder, name width, value width*/
						{ 38, 85, 56},
						{ 42, 20, 72},
						{ 40, 20, 50}
				};

				for (new i = 0; i < MAX_VALUES_PER_SENSOR; ++i) {
					if (i < parts_to_display)
						visibility = 1;
					else
						visibility = 0;

					_change_display_state(i, part_states[parts_to_display - 1][0], part_states[parts_to_display - 1][1], part_states[parts_to_display - 1][2], visibility);
				}
			}

			public message(Msg_Type:type, id, ...) {
				if (type != MSG_INT || id != MSG_ID_DATA_DISPLAY_CHANGED)
					return;

				_change_displays_state(getarg(2));
			}
		}
	}
}